//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MyTanks2D
{
    public partial class @NewControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @NewControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""NewActionMap"",
            ""id"": ""5a344a91-22e1-4c16-94cf-f1e9f475bbf3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ca651b4e-33d7-4b03-9a77-e7c3675441f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""4527b08b-fc5b-4a5f-94f5-5c05f5e507f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotationTower"",
                    ""type"": ""Value"",
                    ""id"": ""fa603538-80d6-48d7-8656-4354bf43e492"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3cc355cc-a7e0-4761-b459-7ad8eeeb0e3a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ebc5eb6d-a30e-4406-9f19-61a1194f5e10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eea4f9ec-72ee-4321-b6a6-a3b16b9febac"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""997fa214-5d2c-48d5-bbba-bb8f4ab29fe3"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12cdfb2d-fd53-415e-a2c0-9cc9b7a98267"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d4a0c34c-b661-4182-8184-004877a10174"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f1dffa7b-7172-4de1-8526-4ce1bb136793"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationTower"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""769e159c-57f0-4aaf-baab-2f1a5151f25e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationTower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c3c7701d-1621-4458-b478-fbc04e404541"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotationTower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // NewActionMap
            m_NewActionMap = asset.FindActionMap("NewActionMap", throwIfNotFound: true);
            m_NewActionMap_Movement = m_NewActionMap.FindAction("Movement", throwIfNotFound: true);
            m_NewActionMap_Fire = m_NewActionMap.FindAction("Fire", throwIfNotFound: true);
            m_NewActionMap_RotationTower = m_NewActionMap.FindAction("RotationTower", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // NewActionMap
        private readonly InputActionMap m_NewActionMap;
        private INewActionMapActions m_NewActionMapActionsCallbackInterface;
        private readonly InputAction m_NewActionMap_Movement;
        private readonly InputAction m_NewActionMap_Fire;
        private readonly InputAction m_NewActionMap_RotationTower;
        public struct NewActionMapActions
        {
            private @NewControls m_Wrapper;
            public NewActionMapActions(@NewControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_NewActionMap_Movement;
            public InputAction @Fire => m_Wrapper.m_NewActionMap_Fire;
            public InputAction @RotationTower => m_Wrapper.m_NewActionMap_RotationTower;
            public InputActionMap Get() { return m_Wrapper.m_NewActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(NewActionMapActions set) { return set.Get(); }
            public void SetCallbacks(INewActionMapActions instance)
            {
                if (m_Wrapper.m_NewActionMapActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnMovement;
                    @Fire.started -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnFire;
                    @Fire.performed -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnFire;
                    @Fire.canceled -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnFire;
                    @RotationTower.started -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnRotationTower;
                    @RotationTower.performed -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnRotationTower;
                    @RotationTower.canceled -= m_Wrapper.m_NewActionMapActionsCallbackInterface.OnRotationTower;
                }
                m_Wrapper.m_NewActionMapActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Fire.started += instance.OnFire;
                    @Fire.performed += instance.OnFire;
                    @Fire.canceled += instance.OnFire;
                    @RotationTower.started += instance.OnRotationTower;
                    @RotationTower.performed += instance.OnRotationTower;
                    @RotationTower.canceled += instance.OnRotationTower;
                }
            }
        }
        public NewActionMapActions @NewActionMap => new NewActionMapActions(this);
        public interface INewActionMapActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnFire(InputAction.CallbackContext context);
            void OnRotationTower(InputAction.CallbackContext context);
        }
    }
}
